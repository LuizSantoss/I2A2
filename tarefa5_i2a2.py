
ninhos_de_tartarugas = [
    {'RegiÃ£o': "Praia norte", 'Quantidade de ovos': 2, 'Status': "AmeaÃ§ado", 'Risco': "ğŸŸ¡", 'Dias para eclosÃ£o': 30, 'Predadores': False},
    {'RegiÃ£o': "Praia oeste", 'Quantidade de ovos': 53, 'Status': "Danificado", 'Risco': "ğŸ”´", 'Dias para eclosÃ£o': 5, 'Predadores': True},
    {'RegiÃ£o': "Praia sul", 'Quantidade de ovos': 40, 'Status': "Danificado", 'Risco': "ğŸ”´", 'Dias para eclosÃ£o': 3, 'Predadores': False},
    {'RegiÃ£o': "Praia leste", 'Quantidade de ovos': 112, 'Status': "Intacto", 'Risco': "ğŸŸ¢", 'Dias para eclosÃ£o': 55, 'Predadores': False},
    {'RegiÃ£o': "Praia tartaruga", 'Quantidade de ovos': 89, 'Status': "Intacto", 'Risco': "ğŸŸ¢", 'Dias para eclosÃ£o': 48, 'Predadores': False},
    {'RegiÃ£o': "BaÃ­a dos corais", 'Quantidade de ovos': 75, 'Status': "AmeaÃ§ado", 'Risco': "ğŸŸ¡", 'Dias para eclosÃ£o': 25, 'Predadores': True},
    {'RegiÃ£o': "Praia noroeste", 'Quantidade de ovos': 33, 'Status': "Danificado", 'Risco': "ğŸ”´", 'Dias para eclosÃ£o': 12, 'Predadores': True},
    {'RegiÃ£o': "BaÃ­a esperanÃ§a", 'Quantidade de ovos': 121, 'Status': "Intacto", 'Risco': "ğŸŸ¢", 'Dias para eclosÃ£o': 58, 'Predadores': False},
    {'RegiÃ£o': "Praia sudoeste", 'Quantidade de ovos': 62, 'Status': "AmeaÃ§ado", 'Risco': "ğŸŸ¡", 'Dias para eclosÃ£o': 35, 'Predadores': False},
    {'RegiÃ£o': "CostÃ£o rochoso", 'Quantidade de ovos': 45, 'Status': "AmeaÃ§ado", 'Risco': "ğŸŸ¡", 'Dias para eclosÃ£o': 18, 'Predadores': True},
    {'RegiÃ£o': "Ponta da praia", 'Quantidade de ovos': 15, 'Status': "Danificado", 'Risco': "ğŸ”´", 'Dias para eclosÃ£o': 7, 'Predadores': True},
    {'RegiÃ£o': "Praia da desova", 'Quantidade de ovos': 95, 'Status': "Intacto", 'Risco': "ğŸŸ¢", 'Dias para eclosÃ£o': 42, 'Predadores': False},
    {'RegiÃ£o': "Lagoa azul", 'Quantidade de ovos': 81, 'Status': "AmeaÃ§ado", 'Risco': "ğŸŸ¡", 'Dias para eclosÃ£o': 22, 'Predadores': False},
    {'RegiÃ£o': "Praia sudeste", 'Quantidade de ovos': 105, 'Status': "Intacto", 'Risco': "ğŸŸ¢", 'Dias para eclosÃ£o': 50, 'Predadores': True}
]


def mensagem_saida():
    """
    Aguarda a aÃ§Ã£o do usuÃ¡rio antes de seguir com o programa.
    Exibe uma mensagem para retorno ao menu principal.
    Utilizada como etapa final em funÃ§Ãµes que exibem dados ao usuÃ¡rio.

    Retorna:
    funÃ§Ã£o: menu() para reiniciar o processo de navegaÃ§Ã£o.
    """

    input("\nPressione ENTER para voltar ao menu de seleÃ§Ã£o. \n")
    print("\nVoltando ao menu de seleÃ§Ã£o \n")
    return menu()


def registro_de_ninhos():
    """
    Apresenta os ninhos registrados em formato tabular.
    Exibe os dados de cada ninho alinhando colunas com o operador de formataÃ§Ã£o :<15 para manter largura fixa e visual ordenado.
    Facilita a anÃ¡lise e comparaÃ§Ã£o dos dados jÃ¡ inseridos.
    """

    # Contagem total de registros
    total_registros = len(ninhos_de_tartarugas)
    print(f'Total de registros: {total_registros}\n')

    # CabeÃ§alho para a exibiÃ§Ã£o
    print(f"{'RegiÃ£o':<15} {'Quantidade de ovos':<20} {'Status':<15} {'Risco':<10} {'Dias para eclosÃ£o':<20} {'Predadores':<10}")
    print('-' * 80)

    # Exibindo os dados de forma ordenada utilizando operador de formataÃ§Ã£o :<n (n=nÃºmero qualquer)
    for ninho in ninhos_de_tartarugas:
        print(f"{ninho['RegiÃ£o']:<15} {ninho['Quantidade de ovos']:<20} {ninho['Status']:<15} {ninho['Risco']:<10} {ninho['Dias para eclosÃ£o']:<20} {str(ninho['Predadores']):<10}")

    mensagem_saida()


def registrar_ninho():
    """
    Coleta e valida os dados fornecidos pelo usuÃ¡rio para criar um novo registro.
    Organiza as informaÃ§Ãµes em um dicionÃ¡rio e adiciona Ã  base de ninhos.

    Retorna:
    funÃ§Ã£o: menu() apÃ³s finalizar ou interromper a inserÃ§Ã£o.
    """


    # Loop principal para registro de novos ninhos, exibindo tÃ­tulo formatado
    while True:
        print('\n',"==== ADICIONANDO NINHO AO REGISTRO ====".center(100))


        # Solicita ao usuÃ¡rio a regiÃ£o do ninho, com normalizaÃ§Ã£o do texto
        regiao = input("\nQual Ã© a regiÃ£o da praia do ninho? \n").strip().lower().capitalize()


        # Recebe e valida a quantidade de ovos como nÃºmero inteiro
        while True:
            try:
                qtd_ovos = int(input("\nQual Ã© a quantidade de ovos no ninho? \n").strip())
                break
            except ValueError:
                print("Por favor, insira um nÃºmero vÃ¡lido!")


        # Solicita e valida a situaÃ§Ã£o do ninho entre trÃªs opÃ§Ãµes vÃ¡lidas
        while True:
            status = input("\nQual Ã© a situaÃ§Ã£o do ninho? (Intacto, AmeaÃ§ado, Danificado)\n").strip().lower().capitalize()
            if status == "Intacto":
                break
            elif status == "AmeaÃ§ado":
                break
            elif status == "Danificado":
                break
            else:
                print("Digite um valor vÃ¡lido (Intacto, AmeaÃ§ado ou Danificado.)")


        # Menu de seleÃ§Ã£o de risco com Ã­cones visuais
        print("\nQual Ã© o risco deste ninho?\n")
        print("1 - ğŸŸ¢ EstÃ¡vel")
        print("2 - ğŸŸ¡ Sob observaÃ§Ã£o")
        print("3 - ğŸ”´ CrÃ­tico")


        # Valida entrada do usuÃ¡rio e associa o emoji correspondente ao risco
        risco = None
        while True:
            selecao = input("\nIdentifique a situaÃ§Ã£o de risco do ninho: \n").strip().lower()
            if selecao == "1":
                risco = "ğŸŸ¢"
                break
            elif selecao == "2":
                risco = "ğŸŸ¡"
                break
            elif selecao == "3":
                risco = "ğŸ”´"
                break
            else:
                print("Escolha uma opÃ§Ã£o vÃ¡lida!")


        # Solicita e valida nÃºmero de dias para eclosÃ£o dos ovos
        while True:
            try:
                dias = int(input("\nQuantos dias estÃ£o estimados para a eclosÃ£o dos ovos? \n").strip())
                break
            except ValueError:
                print("Insira um nÃºmero vÃ¡lido!")


        # Recebe informaÃ§Ã£o sobre presenÃ§a de predadores com validaÃ§Ã£o simples
        while True:
            predadores = input("\nHÃ¡ predadores por perto? (S/N)\n").strip().lower()
            if predadores == "s":
                predadores = True
                break
            elif predadores == "n":
                predadores = False
                break
            else:
                print("\nInsira uma opÃ§Ã£o vÃ¡lida!")


        # Monta o dicionÃ¡rio com todos os dados e adiciona ao registro principal
        registro = {
            'RegiÃ£o': regiao,
            'Quantidade de ovos': qtd_ovos,
            'Status': status,
            'Risco': risco,
            'Dias para eclosÃ£o': dias,
            'Predadores': predadores
        }

        ninhos_de_tartarugas.append(registro)
        print("\nNinho registrado com sucesso âœ…")



        # Confirma se o usuÃ¡rio deseja fazer um novo registro ou voltar ao menu
        while True:
            confirma = input("\nDeseja fazer um novo registro? (S/N)\n").strip().lower()
            if confirma == "s":
                continue
            elif confirma == "n":
                print("\nVoltando ao menu de seleÃ§Ã£o\n")
                break
        return menu()



def media_ovos_risco_verde():
    """
    Calcula a mÃ©dia de ovos por ninho entre aqueles classificados com risco 'verde'.

    Filtra os dados por classificaÃ§Ã£o de risco, extrai a quantidade de ovos de cada ninho,
    e computa a mÃ©dia aritmÃ©tica. Ãštil para anÃ¡lise da fertilidade em Ã¡reas seguras.

    Retorno:
        float: Valor mÃ©dio de ovos por ninho com risco verde.
    """


    # Inicializa acumuladores para cÃ¡lculo da mÃ©dia
    total_ovos = 0
    quantidade_ninhos = 0

    # Soma os ovos apenas dos ninhos com risco 'ğŸŸ¢'
    for ninho in ninhos_de_tartarugas:
        if ninho['Risco'] == 'ğŸŸ¢':
            total_ovos += ninho['Quantidade de ovos']
            quantidade_ninhos += 1

    # Verifica se hÃ¡ registros vÃ¡lidos para evitar divisÃ£o por zero
    if quantidade_ninhos == 0:
        print("\nNÃ£o hÃ¡ ninhos com risco 'ğŸŸ¢'.")
        return mensagem_saida()  # Evita divisÃ£o por zero se nÃ£o houver ninhos com risco 'ğŸŸ¢'

    print(f'\nA mÃ©dia de ovos com o risco "ğŸŸ¢" Ã© de: {total_ovos / quantidade_ninhos:.2f}')
    mensagem_saida()


def ninhos_prestes_a_eclodir():
    """
    Identifica e lista os ninhos cuja data estimada de eclosÃ£o estÃ¡ prÃ³xima.

    Verifica a diferenÃ§a entre a data atual e a estimativa de eclosÃ£o, comparando com um limiar prÃ©-definido
    (ex.: prÃ³ximos 3 dias). Utilizado para acompanhamento de ninhos em estÃ¡gio final do ciclo.

    Retorno:
        List[dict]: Lista de ninhos prestes a eclodir com seus respectivos identificadores e datas.
    """


    # Conta ninhos com eclosÃ£o prevista para 5 dias ou menos
    quantidade_ninhos_eclodindo = 0
    for ninho in ninhos_de_tartarugas:
        if ninho['Dias para eclosÃ£o'] <= 5:
            quantidade_ninhos_eclodindo += 1
    print(f'\nA quantidade de ninhos que estÃ£o prestes a eclodir Ã©: {quantidade_ninhos_eclodindo}')
    mensagem_saida()



def regiao_com_mais_risco_vermelho():
    """
    Analisa as regiÃµes e retorna aquela com mais ocorrÃªncias de risco vermelho.

    Itera pelos ninhos agrupando por regiÃ£o e contabiliza apenas os que possuem risco classificado como 'vermelho'.
    Ideal para orientar decisÃµes estratÃ©gicas e alocaÃ§Ã£o de recursos.

    Retorno:
        str: Nome da regiÃ£o com maior nÃºmero de casos de risco vermelho.
    """


    contagem_riscos_vermelhos = {}

    # Conta o nÃºmero de riscos 'ğŸ”´' por regiÃ£o
    for ninho in ninhos_de_tartarugas:
        if ninho['Risco'] == 'ğŸ”´':
            regiao = ninho['RegiÃ£o']
            if regiao not in contagem_riscos_vermelhos:
                contagem_riscos_vermelhos[regiao] = 1
            else:
                contagem_riscos_vermelhos[regiao] += 1

    # Encontra a regiÃ£o com mais riscos 'ğŸ”´'
    regiao_mais_risco = None
    max_riscos = 0
    for regiao, quantidade in contagem_riscos_vermelhos.items():
        if quantidade > max_riscos:
            max_riscos = quantidade
            regiao_mais_risco = regiao

    print(f'\nA regiÃ£o com mais risco "ğŸ”´" Ã©: {regiao_mais_risco}')
    mensagem_saida()


def ninhos_com_predadores_e_danificados():
    """
    Conta a quantidade de ninhos que estÃ£o danificados e possuem presenÃ§a de predadores.

    Utilizada para identificar situaÃ§Ãµes crÃ­ticas de risco Ã  sobrevivÃªncia dos ovos.

    Retorno:
        int: NÃºmero total de ninhos com status 'Danificado' e presenÃ§a de predadores.
    """

    # Soma ninhos que estÃ£o danificados e tÃªm predadores presentes
    quantidade_ninhos_danificados_com_predadores = 0
    for ninho in ninhos_de_tartarugas:
        if ninho['Predadores'] and ninho['Status'] == 'Danificado':
            quantidade_ninhos_danificados_com_predadores += 1
    print(f'\nA quantidade de ninhos danificados com predadores Ã©: {quantidade_ninhos_danificados_com_predadores}')

    mensagem_saida()



def menu():
    """
    Exibe o menu principal de navegaÃ§Ã£o do sistema de monitoramento.

    Apresenta opÃ§Ãµes numeradas para registrar, consultar e analisar os ninhos.
    Aguarda a entrada do usuÃ¡rio e executa a funÃ§Ã£o correspondente com base na seleÃ§Ã£o.
    O loop se repete atÃ© que o usuÃ¡rio escolha encerrar o sistema explicitamente.

    Retorno:
        None
    """


    # loop do menu de seleÃ§Ã£o
    while True:
        print("-"*100)
        print("MENU GUARDIÃƒO DAS TARTARUGAS".center(100))
        print("-"*100)

        print('\n',"1 - Registrar ninho ".center(100), '\n')

        print("2 - Registro de ninhos".center(100), '\n')

        print('3 - Exibir mÃ©dia de ovos com risco "ğŸŸ¢"'.center(100), '\n')

        print("4 - Ninhos prestes a eclodir".center(100), '\n')

        print('5 - RegiÃ£o com ninhos sob risco "ğŸ”´"'.center(100), '\n')

        print("6 - Ninhos com presenÃ§a de predadores e danificados".center(100), '\n')

        print("7 - Encerrar sistema".center(100))

        selecionando = input('\nSelecione uma opÃ§Ã£o\n').strip().lower()

        # condicionais de chamada de funÃ§Ãµes
        if selecionando == "1":
            registrar_ninho()

        elif selecionando == "2":
            registro_de_ninhos()

        elif selecionando == "3":
            media_ovos_risco_verde()

        elif selecionando == "4":
            ninhos_prestes_a_eclodir()

        elif selecionando == "5":
            regiao_com_mais_risco_vermelho()

        elif selecionando == "6":
            ninhos_com_predadores_e_danificados()

        # para encerrar Ã© necessÃ¡rio confirmar o encerramento
        elif selecionando == "7":
            confirmar = input("\nPara confirmar o encerramento do sistema digite SAIR.\nPara voltar pressione ENTER.").strip().lower()
            if confirmar == "sair":
                print("\nEncerrando o sistema...\n")
                break
            else:
                print("NÃ£o compreendi o que foi escrito. Voltando ao menu de seleÃ§Ã£o.")
                continue
        else:
            print("Selecione uma opÃ§Ã£o vÃ¡lida!")


# iniciando sistema
menu()